#include "s21_decimal.h"

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#test s21_from_int_to_decimal_test_01
int src = 0;
s21_decimal dst;
int result = s21_from_int_to_decimal(src, &dst);
ck_assert_int_eq(result, 0);
for (int i = 1; i < 3; i++) {
  ck_assert_int_eq(dst.bits[i], 0);
}
if (src < 0) {
  ck_assert_int_eq(dst.bits[3], 0b10000000000000000000000000000000);
} else {
  ck_assert_int_eq(dst.bits[3], 0);
}


src = 2;
result = s21_from_int_to_decimal(src, &dst);
ck_assert_int_eq(result, 0);
ck_assert_int_eq(dst.bits[0], abs(src));
for (int i = 1; i < 3; i++) {
  ck_assert_int_eq(dst.bits[i], 0);
}
if (src < 0) {
  ck_assert_int_eq(dst.bits[3], -2147483648);
} else {
  ck_assert_int_eq(dst.bits[3], 0);
}

src = -2;
result = s21_from_int_to_decimal(src, &dst);
ck_assert_int_eq(result, 0);
ck_assert_int_eq(dst.bits[0], abs(src));
for (int i = 1; i < 3; i++) {
  ck_assert_int_eq(dst.bits[i], 0);
}
if (src < 0) {
  ck_assert_int_eq(dst.bits[3], -2147483648);
} else {
  ck_assert_int_eq(dst.bits[3], 0);
}

src = INT_MAX;
result = s21_from_int_to_decimal(src, &dst);
ck_assert_int_eq(result, 0);
ck_assert_int_eq(dst.bits[0], abs(src));
for (int i = 1; i < 3; i++) {
  ck_assert_int_eq(dst.bits[i], 0);
}
if (src < 0) {
  ck_assert_int_eq(dst.bits[3], -2147483648);
} else {
  ck_assert_int_eq(dst.bits[3], 0);
}

src = INT_MIN;
result = s21_from_int_to_decimal(src, &dst);
ck_assert_int_eq(result, 0);
ck_assert_int_eq(dst.bits[0], abs(src));
for (int i = 1; i < 3; i++) {
  ck_assert_int_eq(dst.bits[i], 0);
}
if (src < 0) {
  ck_assert_int_eq(dst.bits[3], -2147483648);
} else {
  ck_assert_int_eq(dst.bits[3], 0);
}

#test s21_negate_test_02
s21_decimal value = {777777, 888, 22, 0};
s21_decimal result;
int res = s21_negate(value, &result);
ck_assert_int_eq(res, 0);
ck_assert_int_eq(result.bits[0], 777777);
ck_assert_int_eq(result.bits[1], 888);
ck_assert_int_eq(result.bits[2], 22);
ck_assert_int_eq(result.bits[3], -2147483648);

#test s21_is_not_equal_test_03
s21_decimal a = {777777, 888, 22, 0};
s21_decimal b = {777777, 888, 22, 0};
ck_assert_int_eq(s21_is_not_equal(a, b), 0);
s21_decimal c = {777775, 888, 22, 0};
ck_assert_int_eq(s21_is_not_equal(a, c), 1);

s21_decimal d = {0, 0, 0, 0};
s21_decimal e = {0, 0, 0, 0b10000000000000000000000000000000};
ck_assert_int_eq(s21_is_not_equal(d, e), 0);

#test s21_from_float_to_decimal_test_04
float src = 0;
s21_decimal dst;
int ret = s21_from_float_to_decimal(src, &dst);
s21_decimal result = {0, 0, 0, 0};
ck_assert_int_eq(ret, 0);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(dst.bits[i], result.bits[i]);
}

src = 1;
ret = s21_from_float_to_decimal(src, &dst);
s21_decimal result1 = {1, 0, 0, 0};
ck_assert_int_eq(ret, 0);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(dst.bits[i], result1.bits[i]);
}

src = 2;
ret = s21_from_float_to_decimal(src, &dst);
s21_decimal result2 = {2, 0, 0, 0};
ck_assert_int_eq(ret, 0);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(dst.bits[i], result2.bits[i]);
}

src = 1.5;
ret = s21_from_float_to_decimal(src, &dst);
s21_decimal result3 = {15, 0, 0, 0b00000000000000010000000000000000};
ck_assert_int_eq(ret, 0);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(dst.bits[i], result3.bits[i]);
}

src = -1.5;
ret = s21_from_float_to_decimal(src, &dst);
s21_decimal result4 = {15, 0, 0, 0b10000000000000010000000000000000};
ck_assert_int_eq(ret, 0);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(dst.bits[i], result4.bits[i]);
}

src = 9e-29;
ret = s21_from_float_to_decimal(src, &dst);
s21_decimal result5 = {0, 0, 0, 0};
ck_assert_int_eq(ret, 1);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(dst.bits[i], result5.bits[i]);
}

src = -9e-29;
ret = s21_from_float_to_decimal(src, &dst);
s21_decimal result6 = {0, 0, 0, 0};
ck_assert_int_eq(ret, 1);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(dst.bits[i], result6.bits[i]);
}

src = 0. / 0.;
ret = s21_from_float_to_decimal(src, &dst);
ck_assert_int_eq(ret, 1);

src = 1. / 0.;
ret = s21_from_float_to_decimal(src, &dst);
ck_assert_int_eq(ret, 1);

src = 0.5;
ret = s21_from_float_to_decimal(src, &dst);
s21_decimal result7 = {5000000, 0, 0, 0b00000000000001110000000000000000};
ck_assert_int_eq(ret, 0);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(dst.bits[i], result7.bits[i]);
}

src = 1e37;
ret = s21_from_float_to_decimal(src, &dst);
ck_assert_int_eq(ret, 1);


#test s21_from_decimal_to_int_test_05
int i = 0;
int j = 1;
int res = 0;
s21_decimal src;
s21_from_int_to_decimal(i, &src);
res = s21_from_decimal_to_int(src, &j);
ck_assert_int_eq(res, 0);
ck_assert_int_eq(i, j);

i = 7890;
s21_from_int_to_decimal(i, &src);
res = s21_from_decimal_to_int(src, &j);
ck_assert_int_eq(res, 0);
ck_assert_int_eq(i, j);

i = -12345678;
s21_from_int_to_decimal(i, &src);
res = s21_from_decimal_to_int(src, &j);
ck_assert_int_eq(res, 0);
ck_assert_int_eq(i, j);

s21_decimal src1 = {1, 1, 1, 0};
res = s21_from_decimal_to_int(src1, &j);
ck_assert_int_eq(res, 1);

s21_decimal src2 = {2147483648, 0, 0, 0};
res = s21_from_decimal_to_int(src2, &j);
ck_assert_int_eq(res, 1);

s21_decimal src3 = {2147483647, 0, 0, 0};
res = s21_from_decimal_to_int(src3, &j);
ck_assert_int_eq(res, 0);
ck_assert_int_eq(2147483647, j);

#test s21_check_valid_decimal_test_06
s21_decimal src = {0, 0, 0, 0b00000000000000000000000000000001};
int res = s21_check_valid_decimal(src);
ck_assert_int_eq(res, 1);

s21_decimal src1 = {0, 0, 0, 0b00000000000000000000000000000000};
res = s21_check_valid_decimal(src1);
ck_assert_int_eq(res, 0);

s21_decimal src2 = {0, 0, 0, 0b00000000000000001000000000000000};
res = s21_check_valid_decimal(src2);
ck_assert_int_eq(res, 1);

s21_decimal src3 = {0, 0, 0, 0b00000000000000010000000000000000};
res = s21_check_valid_decimal(src3);
ck_assert_int_eq(res, 0);

s21_decimal src4 = {0, 0, 0, 0b01000000000000000000000000000000};
res = s21_check_valid_decimal(src4);
ck_assert_int_eq(res, 1);

s21_decimal src5 = {0, 0, 0, 0b10000000000000000000000000000000};
res = s21_check_valid_decimal(src5);
ck_assert_int_eq(res, 0);

s21_decimal src6 = {0, 0, 0, 0b00000001000000000000000000000000};
res = s21_check_valid_decimal(src6);
ck_assert_int_eq(res, 1);

s21_decimal src7 = {0, 0, 0, 0b00000000100000000000000000000000};
res = s21_check_valid_decimal(src7);
ck_assert_int_eq(res, 0);

#test s21_from_decimal_to_float_test_07
int res = 2;
s21_decimal src = {15, 0, 0, 0b00000000000000010000000000000000};
float dst = 0.;
res = s21_from_decimal_to_float(src, &dst);
ck_assert_int_eq(res, 0);
ck_assert_float_eq(dst, 1.5);

s21_decimal src1 = {1234567, 0, 0, 0b10000000000001110000000000000000};
res = s21_from_decimal_to_float(src1, &dst);
ck_assert_int_eq(res, 0);
ck_assert_float_eq(dst, -0.1234567);

s21_decimal src2 = {1234567, 0, 0, 0b10000010000001110000000000000000};
res = s21_from_decimal_to_float(src2, &dst);
ck_assert_int_eq(res, 1);

#test s21_add_test_08
int ret = -1;
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {0, 0, 0, 0};
s21_decimal result = {1, 1, 1, 1};
ret = s21_add(value_1, value_2, &result);
ck_assert_int_eq(ret, 0);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(result.bits[i], 0);
}

s21_decimal value_3 = {1, 0, 0, 0};
s21_decimal value_4 = {1, 0, 0, 0b00000000000000010000000000000000};
ret = s21_add(value_3, value_4, &result);
ck_assert_int_eq(ret, 0);
ck_assert_int_eq(result.bits[0], 11);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[3], 0b00000000000000010000000000000000);

s21_decimal value_5 = {0b11111111111111111111111111111110, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0};
s21_decimal value_6 = {5, 0, 0, 0b00000000000000010000000000000000};
ret = s21_add(value_5, value_6, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0b11111111111111111111111111111110);
ck_assert_uint_eq((unsigned int)result.bits[1], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[2], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b00000000000000000000000000000000);

s21_decimal value_7 = {0b11111111111111111111111111111110, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0};
s21_decimal value_8 = {5, 0, 0, 0b00000000000000010000000000000000};
ret = s21_add(value_8, value_7, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0b11111111111111111111111111111110);
ck_assert_uint_eq((unsigned int)result.bits[1], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[2], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b00000000000000000000000000000000);

s21_decimal value_9 = {1, 0, 0, 0};
s21_decimal value_10 = {1, 0, 0, 0b00000000000000010000000000000000};
ret = s21_add(value_10, value_9, &result);
ck_assert_int_eq(ret, 0);
ck_assert_int_eq(result.bits[0], 11);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[3], 0b00000000000000010000000000000000);

s21_decimal value_11 = {100, 0, 0, 0};
s21_decimal value_12 = {50, 0, 0, 0b10000000000000000000000000000000};
ret = s21_add(value_11, value_12, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 50);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_13 = {100, 0, 0, 0b10000000000000000000000000000000};
s21_decimal value_14 = {50, 0, 0, 0b10000000000000000000000000000000};
ret = s21_add(value_13, value_14, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 150);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

s21_decimal value_15 = {0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0};
s21_decimal value_16 = {1, 0, 0, 0};
ret = s21_add(value_15, value_16, &result);
ck_assert_int_eq(ret, 1);

s21_decimal value_17 = {0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b10000000000000000000000000000000};
s21_decimal value_18 = {1, 0, 0, 0b10000000000000000000000000000000};
ret = s21_add(value_17, value_18, &result);
ck_assert_int_eq(ret, 2);

s21_decimal value_19 = {100, 0, 0, 0};
s21_decimal value_20 = {150, 0, 0, 0b10000000000000000000000000000000};
ret = s21_add(value_19, value_20, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 50);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

s21_decimal value_21 = {500, 0, 0, 0b10000000000000000000000000000000};
s21_decimal value_22 = {150, 0, 0, 0};
ret = s21_add(value_21, value_22, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 350);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

s21_decimal value_23 = {50, 0, 0, 0b10000000000000000000000000000000};
s21_decimal value_24 = {150, 0, 0, 0};
ret = s21_add(value_23, value_24, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 100);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_25 = {50, 999, 888, 0b10000000000000000000000000000000};
s21_decimal value_26 = {50, 999, 888, 0};
ret = s21_add(value_25, value_26, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_27 = {0b11111111111111111111111111111110, 0b11111111111111111111111111111111, 0b00011111111111111111111111111111, 0b00000000000000010000000000000000};
s21_decimal value_28 = {10, 0, 0, 0b00000000000000100000000000000000};
ret = s21_add(value_27, value_28, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[1], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[2], 0b00011111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b00000000000000010000000000000000);

s21_decimal value_29 = {0b11111111111111111111111111111110, 0b11111111111111111111111111111111, 0b00011111111111111111111111111111, 0b00000000000000010000000000000000};
s21_decimal value_30 = {10, 0, 0, 0b00000000000000100000000000000000};
ret = s21_add(value_29, value_30, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[1], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[2], 0b00011111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b00000000000000010000000000000000);

s21_decimal value_31 = {0b11111111111111111111111111111110, 0b11111111111111111111111111111111, 0b00011111111111111111111111111111, 0};
s21_decimal value_32 = {100, 0, 0, 0b00000000000000100000000000000000};
ret = s21_add(value_31, value_32, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[1], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[2], 0b00011111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_33 = {0b11111111111111111111111111111110, 0b11111111111111111111111111111111, 0b00011111111111111111111111111111, 0};
s21_decimal value_34 = {11, 0, 0, 0b00000000000000100000000000000000};
ret = s21_add(value_33, value_34, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0b11111111111111111111111111111110);
ck_assert_uint_eq((unsigned int)result.bits[1], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[2], 0b00011111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_35 = {0b11111111111111111111111111111110, 0b11111111111111111111111111111111, 0b00011111111111111111111111111111, 0};
s21_decimal value_36 = {51, 0, 0, 0b00000000000000100000000000000000};
ret = s21_add(value_35, value_36, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[1], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[2], 0b00011111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_37 = {0b11111111111111111111111111111110, 0b11111111111111111111111111111111, 0b00011111111111111111111111111111, 0};
s21_decimal value_38 = {55, 0, 0, 0b00000000000000100000000000000000};
ret = s21_add(value_37, value_38, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[1], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[2], 0b00011111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_39 = {0b11111111111111111111111111111110, 0b11111111111111111111111111111111, 0b00011111111111111111111111111111, 0};
s21_decimal value_40 = {45, 0, 0, 0b00000000000000100000000000000000};
ret = s21_add(value_39, value_40, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0b11111111111111111111111111111110);
ck_assert_uint_eq((unsigned int)result.bits[1], 0b11111111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[2], 0b00011111111111111111111111111111);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

#test s21_sub_test_09
int ret = -1;
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {0, 0, 0, 0};
s21_decimal result = {1, 1, 1, 1};
ret = s21_sub(value_1, value_2, &result);
ck_assert_int_eq(ret, 0);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(result.bits[i], 0);
}

s21_decimal value_3 = {50, 0, 0, 0b10000000000000000000000000000000};
s21_decimal value_4 = {150, 0, 0, 0};
ret = s21_sub(value_3, value_4, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 200);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

s21_decimal value_5 = {50, 0, 0, 0};
s21_decimal value_6 = {150, 0, 0, 0b10000000000000000000000000000000};
ret = s21_sub(value_5, value_6, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 200);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

#test s21_mul_test_10
int res = -1;
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {0, 0, 0, 0};
s21_decimal result = {1, 1, 1, 0};
res = s21_mul(value_1, value_2, &result);
ck_assert_int_eq(res, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_3 = {2, 0, 0, 0};
s21_decimal value_4 = {3, 0, 0, 0};
res = s21_mul(value_3, value_4, &result);
ck_assert_int_eq(res, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 6);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_5 = {100, 0, 0, 0b10000000000000000000000000000000};
s21_decimal value_6 = {123456, 0, 0, 0};
res = s21_mul(value_5, value_6, &result);
ck_assert_int_eq(res, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 12345600);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

s21_decimal value_7 = {5, 0, 0, 0b10000000000000010000000000000000};
s21_decimal value_8 = {4, 0, 0, 0b10000000000000010000000000000000};
res = s21_mul(value_7, value_8, &result);
ck_assert_int_eq(res, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 20);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b00000000000000100000000000000000);

s21_decimal value_9 = {5, 0, 0, 0};
s21_decimal value_10 = {4, 0, 0, 0};
s21_set_scale(&value_9, 28);
s21_set_scale(&value_10, 28);
res = s21_mul(value_9, value_10, &result);
ck_assert_int_eq(res, 2);

s21_decimal value_11 = {5, 0, 0, 0};
s21_decimal value_12 = {40, 0, 0, 0};
s21_set_scale(&value_11, 28);
s21_set_scale(&value_12, 2);
res = s21_mul(value_11, value_12, &result);
ck_assert_int_eq(res, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 2);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b00000000000111000000000000000000);

s21_decimal value_13 = {7, 0, 0, 0};
s21_decimal value_14 = {8, 0, 0, 0};
s21_set_scale(&value_13, 28);
s21_set_scale(&value_14, 2);
res = s21_mul(value_13, value_14, &result);
ck_assert_int_eq(res, 2);

s21_decimal value_15 = {0, 0, 0b11111111111111111111111111111111, 0};
s21_decimal value_16 = {8, 0, 0b11111111111111111111111111111111, 0};
res = s21_mul(value_15, value_16, &result);
ck_assert_int_eq(res, 1);

#test s21_is_less_test_11
int ret = -1;
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {0, 0, 0, 0};
ret = s21_is_less(value_1, value_2);
ck_assert_int_eq(ret, 0);

s21_decimal value_3 = {0, 0, 0, 0};
s21_decimal value_4 = {0, 0, 0, 0b10000000000000000000000000000000};
ret = s21_is_less(value_3, value_4);
ck_assert_int_eq(ret, 0);

s21_decimal value_5 = {1, 0, 0, 0};
s21_decimal value_6 = {2, 0, 0, 0};
ret = s21_is_less(value_5, value_6);
ck_assert_int_eq(ret, 1);

s21_decimal value_7 = {2, 0, 0, 0};
s21_decimal value_8 = {1, 0, 0, 0};
ret = s21_is_less(value_7, value_8);
ck_assert_int_eq(ret, 0);

s21_decimal value_9 = {2, 0, 0, 0b10000000000000000000000000000000};
s21_decimal value_10 = {2, 0, 0, 0};
ret = s21_is_less(value_9, value_10);
ck_assert_int_eq(ret, 1);

s21_decimal value_11 = {2, 0, 0, 0};
s21_decimal value_12 = {3, 0, 0, 0b10000000000000000000000000000000};
ret = s21_is_less(value_11, value_12);
ck_assert_int_eq(ret, 0);

s21_decimal value_13 = {2, 5, 0, 0};
s21_decimal value_14 = {3, 0, 0, 0};
s21_set_scale(&value_13, 10);
s21_set_scale(&value_14, 8);
ret = s21_is_less(value_13, value_14);
ck_assert_int_eq(ret, 0);

s21_decimal value_15 = {2, 5, 0, 0};
s21_decimal value_16 = {0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b00011111111111111111111111111111, 0};
s21_set_scale(&value_15, 10);
s21_set_scale(&value_16, 8);
ret = s21_is_less(value_15, value_16);
ck_assert_int_eq(ret, 1);

#test s12_is_equal_test_12
int ret = -1;
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {0, 0, 0, 0b10000000000000000000000000000000};
ret = s21_is_equal(value_1, value_2);
ck_assert_int_eq(ret, 1);

s21_decimal value_3 = {0, 0, 0, 0b00000000000000100000000000000000};
s21_decimal value_4 = {0, 0, 0, 0};
ret = s21_is_equal(value_3, value_4);
ck_assert_int_eq(ret, 1);

s21_decimal value_5 = {10, 0, 0, 0b00000000000000010000000000000000};
s21_decimal value_6 = {1, 0, 0, 0};
ret = s21_is_equal(value_5, value_6);
ck_assert_int_eq(ret, 1);

s21_decimal value_7 = {10, 0, 10, 0b10000000000000000000000000000000};
s21_decimal value_8 = {10, 0, 10, 0};
ret = s21_is_equal(value_7, value_8);
ck_assert_int_eq(ret, 0);

#test s21_is_less_or_equal_test_13
int ret = -1;
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {0, 0, 0, 0b10000000000000000000000000000000};
ret = s21_is_less_or_equal(value_1, value_2);
ck_assert_int_eq(ret, 1);

#test s21_is_greater_test_14
int ret = -1;
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {0, 0, 0, 0b10000000000000000000000000000000};
ret = s21_is_greater(value_1, value_2);
ck_assert_int_eq(ret, 0);

#test s21_is_greater_or_equal_test_15
int ret = -1;
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {0, 0, 0, 0b10000000000000000000000000000000};
ret = s21_is_greater_or_equal(value_1, value_2);
ck_assert_int_eq(ret, 1);

#test s21_div_test_16
int ret = -1;
s21_decimal result = {678, 0, 0, 0};
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {0, 0, 0, 0b10000000000000000000000000000000};
ret = s21_div(value_1, value_2, &result);
ck_assert_int_eq(ret, 3);

s21_decimal value_3 = {10, 0, 0, 0};
s21_decimal value_4 = {5, 0, 0, 0b10000000000000000000000000000000};
ret = s21_div(value_3, value_4, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 2);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

s21_decimal value_5 = {1, 0, 0, 0};
s21_decimal value_6 = {2, 0, 0, 0b10000000000000000000000000000000};
ret = s21_div(value_5, value_6, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 5);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000010000000000000000);

s21_decimal value_7 = {1, 0, 0, 0};
s21_decimal value_8 = {2, 0, 0, 0b10000000000000000000000000000000};
s21_set_scale(&value_8, 2);
ret = s21_div(value_7, value_8, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 50);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

s21_decimal value_9 = {0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0};
s21_decimal value_10 = {1, 0, 0, 0b10000000000000000000000000000000};
s21_set_scale(&value_10, 2);
ret = s21_div(value_9, value_10, &result);
ck_assert_int_eq(ret, 2);

s21_decimal value_11 = {0, 0, 0, 0};
s21_decimal value_12 = {5, 0, 0, 0b10000000000000000000000000000000};
ret = s21_div(value_11, value_12, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

s21_decimal value_13 = {18, 0, 0, 0};
s21_decimal value_14 = {9, 0, 0, 0};
s21_set_scale(&value_13, 0);
s21_set_scale(&value_14, 0);
ret = s21_div(value_13, value_14, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 2);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_15 = {18, 0, 0, 0};
s21_decimal value_16 = {9, 0, 0, 0};
s21_set_scale(&value_15, 1);
s21_set_scale(&value_16, 1);
ret = s21_div(value_15, value_16, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 2);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_17 = {18, 0, 0, 0};
s21_decimal value_18 = {9, 0, 0, 0};
s21_set_scale(&value_17, 1);
s21_set_scale(&value_18, 8);
ret = s21_div(value_17, value_18, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 20000000);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);


#test s21_mod_test_17
int ret = -1;
s21_decimal value_1 = {0, 0, 0, 0};
s21_decimal value_2 = {1, 0, 0, 0};
s21_decimal result;
ret = s21_mod(value_1, value_2, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_3 = {1, 0, 0, 0};
s21_decimal value_4 = {0, 0, 0, 0};
ret = s21_mod(value_3, value_4, &result);
ck_assert_int_eq(ret, 3);

s21_decimal value_5 = {5, 0, 0, 0};
s21_decimal value_6 = {3, 0, 0, 0};
ret = s21_mod(value_5, value_6, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 2);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_7 = {65, 0, 0, 0b10000000000000000000000000000000};
s21_decimal value_8 = {325, 0, 0, 0};
s21_set_scale(&value_7, 1);
s21_set_scale(&value_8, 2);
ret = s21_mod(value_7, value_8, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 0);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_9 = {0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0b11111111111111111111111111111111, 0};
s21_decimal value_10 = {325, 0, 0, 0};
s21_set_scale(&value_9, 0);
s21_set_scale(&value_10, 2);
ret = s21_mod(value_9, value_10, &result);
ck_assert_int_eq(ret, 0);
ck_assert_uint_eq((unsigned int)result.bits[0], 3);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

#test s21_floor_test_18
s21_decimal value = {0, 0, 0, 0};
s21_decimal result = {1, 1, 1, 1};
s21_floor(value, &result);
ck_assert_uint_eq((unsigned int)result.bits[0], 0);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_1 = {15, 0, 0, 0};
s21_set_scale(&value_1, 1);
s21_floor(value_1, &result);
ck_assert_uint_eq((unsigned int)result.bits[0], 1);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_2 = {15, 0, 0, 0b10000000000000000000000000000000};
s21_set_scale(&value_2, 1);
s21_floor(value_2, &result);
ck_assert_uint_eq((unsigned int)result.bits[0], 2);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

#test s21_round_test_19
s21_decimal value = {0, 0, 0, 0};
s21_decimal result = {1, 1, 1, 1};
s21_round(value, &result);
ck_assert_uint_eq((unsigned int)result.bits[0], 0);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_1 = {15, 0, 0, 0};
s21_set_scale(&value_1, 1);
s21_round(value_1, &result);
ck_assert_uint_eq((unsigned int)result.bits[0], 2);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_2 = {15, 0, 0, 0b10000000000000000000000000000000};
s21_set_scale(&value_2, 1);
s21_round(value_2, &result);
ck_assert_uint_eq((unsigned int)result.bits[0], 2);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);

#test s21_truncate_test_20
s21_decimal value = {0, 0, 0, 0};
s21_decimal result = {1, 1, 1, 1};
s21_truncate(value, &result);
ck_assert_uint_eq((unsigned int)result.bits[0], 0);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_1 = {15, 0, 0, 0};
s21_set_scale(&value_1, 1);
s21_truncate(value_1, &result);
ck_assert_uint_eq((unsigned int)result.bits[0], 1);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0);

s21_decimal value_2 = {15, 0, 0, 0b10000000000000000000000000000000};
s21_set_scale(&value_2, 1);
s21_truncate(value_2, &result);
ck_assert_uint_eq((unsigned int)result.bits[0], 1);
ck_assert_uint_eq((unsigned int)result.bits[1], 0);
ck_assert_uint_eq((unsigned int)result.bits[2], 0);
ck_assert_uint_eq((unsigned int)result.bits[3], 0b10000000000000000000000000000000);
